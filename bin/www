#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cameradiscovery:bin');
var http = require('http');
var WebSocketServer = require('websocket').server;
const path = require('path');
var onvif = null;
try {
	onvif = require('node-onvif');
} catch(e) {
	throw new Error('Onvif Library not found!',e);
}

const { createTerminus, HealthCheckError } = require('@godaddy/terminus');
require('dotenv').config({path : path.resolve(process.cwd(), '.env')});


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var wsserver = new WebSocketServer({
  httpServer: server,
});
wsserver.on('request', wsServerRequest);

const healthCheckOptions = {
  healthChecks: {
    '/health': async function () {
        console.log('health check ran!'); 
        // Fun thing: if the uptime of the program is odd/even return success or error response.
        if(Math.floor(process.uptime()%2)){
          return Promise.resolve();
        }
        else{
          throw new HealthCheckError('healtcheck failed', errors)
        }
      },
      '/ready': async function(){
        return Promise.resolve();
      }    
  },
  // [optional = 1000] number of milliseconds before forcefull exiting
  timeout: 1000,                   
  beforeShutdown : function () {
    // [optional] called right before exiting
    return new Promise(resolve => {
      console.log('Before Shutting Down! Giving necessary delay here for kubernetes to be surely updated.');
      setTimeout(resolve, 5000)
    });             
  },                  
  onSignal :  function () {
    return new Promise((resolve,reject) => {          
      console.log('server is starting cleanup');
      resolve();
    });
  },
  onShutdown : function () {
    return new Promise((resolve,reject) => {          
      console.log('cleanup finished, server is shutting down');
      resolve();
    });
  }
};
createTerminus(server, healthCheckOptions);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

process.on('uncaughtException', function (er) {
  // do something with this error.  Send a mail to yourself or admins telling the cause.
  console.error(er.stack)
  process.exit(1)
});


// ------------------------------------------------------- websocket method functions ----------------------------------------------
function wsServerRequest(request) {
	var conn = request.accept(null, request.origin);
	conn.on("message", function(message) {
		if(message.type !== 'utf8') {
			return;
		}
		var data = JSON.parse(message.utf8Data);
		var method = data['method'];
		var params = data['params'];
		if(method === 'startDiscovery') {
			startDiscovery(conn);
		} else if(method === 'connect') {
			connect(conn, params);
		} else if(method === 'fetchSnapshot') {
			fetchSnapshot(conn, params);
		} else if(method === 'ptzMove') {
			ptzMove(conn, params);
		} else if(method === 'ptzStop') {
			ptzStop(conn, params);
		} else if(method === 'ptzHome') {
			ptzHome(conn, params);
		}
	});

	conn.on("close", function(message) {

	});
	conn.on("error", function(error) {
		console.log(error);
	});
};

var devices = {};
function startDiscovery(conn) {
	devices = {};
	let names = {};
	onvif.startProbe().then((device_list) => {
		device_list.forEach((device) => {
			let odevice = new onvif.OnvifDevice({
				xaddr: device.xaddrs[0]
			});
			let addr = odevice.address;
			devices[addr] = odevice;
			names[addr] = device.name;
		});
		var devs = {};
		for(var addr in devices) {
			devs[addr] = {
				name: names[addr],
				address: addr
			}
		}
		let res = {'id': 'startDiscovery', 'result': devs};
		conn.send(JSON.stringify(res));
	}).catch((error) => {
		let res = {'id': 'connect', 'error': error.message};
		conn.send(JSON.stringify(res));
	});
}

function connect(conn, params) {
	var device = devices[params.address];
	if(!device) {
		var res = {'id': 'connect', 'error': 'The specified device is not found: ' + params.address};
		conn.send(JSON.stringify(res));
		return;
	}
	if(params.user) {
		device.setAuth(params.user, params.pass);
	}
	device.init((error, result) => {
		var res = {'id': 'connect'};
		if(error) {
			res['error'] = error.toString();
		} else {
			res['result'] = result;
		}
		conn.send(JSON.stringify(res));
	});
}

// For Debug --------------------------------------------
//var total_size = 0;
//var start_time = 0;
//var total_frame = 0;
// ------------------------------------------------------

function fetchSnapshot(conn, params) {
	// For Debug --------------------------------------------
	//if(start_time === 0) {
	//	start_time = Date.now();
	//}
	// ------------------------------------------------------
	var device = devices[params.address];
	if(!device) {
		var res = {'id': 'fetchSnapshot', 'error': 'The specified device is not found: ' + params.address};
		conn.send(JSON.stringify(res));
		return;
	}
	device.fetchSnapshot((error, result) => {
		var res = {'id': 'fetchSnapshot'};
		if(error) {
			res['error'] = error.toString();
		} else {
			var ct = result['headers']['content-type'];
			var buffer = result['body'];
			var b64 = buffer.toString('base64');
			var uri = 'data:' + ct + ';base64,' + b64;
			res['result'] = uri;

			// For Debug --------------------------------------------
			/*
			total_size += parseInt(result['headers']['content-length'], 10);
			var duration = Date.now() - start_time;
			var bps = total_size * 1000 / duration;
			var kbps = parseInt(bps / 1000);
			total_frame ++;
			var fps = Math.round(total_frame * 1000 / duration);
			console.log(kbps + ' kbps / ' + fps + ' fps');
			*/
			// ------------------------------------------------------
		}
		conn.send(JSON.stringify(res));
	});
}

function ptzMove(conn, params) {
	var device = devices[params.address];
	if(!device) {
		var res = {'id': 'ptzMove', 'error': 'The specified device is not found: ' + params.address};
		conn.send(JSON.stringify(res));
		return;
	}
	device.ptzMove(params, (error) => {
		var res = {'id': 'ptzMove'};
		if(error) {
			res['error'] = error.toString();
		} else {
			res['result'] = true;
		}
		conn.send(JSON.stringify(res));
	});
}

function ptzStop(conn, params) {
	var device = devices[params.address];
	if(!device) {
		var res = {'id': 'ptzStop', 'error': 'The specified device is not found: ' + params.address};
		conn.send(JSON.stringify(res));
		return;
	}
	device.ptzStop((error) => {
		var res = {'id': 'ptzStop'};
		if(error) {
			res['error'] = error.toString();
		} else {
			res['result'] = true;
		}
		conn.send(JSON.stringify(res));
	});
}

function ptzHome(conn, params) {
	var device = devices[params.address];
	if(!device) {
		var res = {'id': 'ptzMove', 'error': 'The specified device is not found: ' + params.address};
		conn.send(JSON.stringify(res));
		return;
	}
	if(!device.services.ptz) {
		var res = {'id': 'ptzHome', 'error': 'The specified device does not support PTZ.'};
		conn.send(JSON.stringify(res));
		return;
	}

	var ptz = device.services.ptz;
	var profile = device.getCurrentProfile();
	var params = {
		'ProfileToken': profile['token'],
		'Speed'       : 1
	};
	ptz.gotoHomePosition(params, (error, result) => {
		var res = {'id': 'ptzMove'};
		if(error) {
			res['error'] = error.toString();
		} else {
			res['result'] = true;
		}
		conn.send(JSON.stringify(res));
	});
}